import csv
import os
from datetime import datetime

def sanitize_path(input_path):
    sanitized = input_path.strip('\'"').replace("\\ ", " ").strip()
    if os.path.exists(sanitized):
        return sanitized
    else:
        raise FileNotFoundError(f"Not a valid file path: {sanitized}. Please try again.")

def load_parsed_card_data(parsed_csv_path):
    card_data = {}
    with open(parsed_csv_path, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            card_data[row['webp_filename']] = row['original_filename']
    return card_data

def process_csv(input_file, output_folder, s3_prefix, parsed_card_data):
    # Generate output filename
    input_filename = os.path.basename(input_file)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"processed_{os.path.splitext(input_filename)[0]}_{timestamp}.csv"
    output_file = os.path.join(output_folder, output_filename)

    with open(input_file, 'r') as infile, open(output_file, 'w', newline='') as outfile:
        reader = csv.DictReader(infile)
        fieldnames = ['card_filename', 'qr_code_url']
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()

        for row in reader:
            # Process card_image_url
            webp_filename = row['card_image_url'].replace(s3_prefix, '')
            if webp_filename in parsed_card_data:
                card_filename = parsed_card_data[webp_filename]
            else:
                print(f"Warning: No matching original filename found for {webp_filename}")
                card_filename = webp_filename.replace('.webp', '.pdf')

            # Process qrcode_id
            qr_code_url = f"https://athleti.fi/qr-code/{row['qrcode_id']}"

            writer.writerow({
                'card_filename': card_filename,
                'qr_code_url': qr_code_url
            })

    return output_file

def print_welcome_message():
    welcome_text = """
    ╔════════════════════════════════════════════════════════════════════════════╗
    ║               Welcome to AthletiFi QR Code CSV Processor!                  ║
    ╚════════════════════════════════════════════════════════════════════════════╝

    This script processes the CSV file exported from the QR code check query,
    preparing it for use with the QR code generator. It performs the following tasks:

    1. Removes the S3 URL prefix from card image URLs
    2. Restores original filenames using data from parsed_card_data.csv
    3. Prepends the QR code base URL to qrcode_id values
    4. Renames columns appropriately
    5. Removes the dashboard_slug column

    ┌──────────────────────────────────────────┐
    │           Before You Begin:              │
    └──────────────────────────────────────────┘
    1. Have the parsed_card_data.csv file generated by parse_filenames.py.
    2. Ensure you have the CSV file exported from the QR code check query from generate_athletifi_db_queries.py
    3. Know the S3 URL prefix for your card images.
    4. Have a destination folder in mind for the processed CSV file.

    Let's prepare your CSV for QR code generation!
    """
    print(welcome_text)

def main():
    print_welcome_message()

    parsed_csv_path = input("Enter the path to the parsed_card_data.csv file: ")
    try:
        parsed_csv_path = sanitize_path(parsed_csv_path)
    except FileNotFoundError as e:
        print(e)
        return

    input_file = input("Enter the path to the input CSV file with the results from the QR code check query: ")
    try:
        input_file = sanitize_path(input_file)
    except FileNotFoundError as e:
        print(e)
        return

    output_folder = input("Enter the path to the folder where you want to save the output CSV: ")
    try:
        output_folder = sanitize_path(output_folder)
    except FileNotFoundError as e:
        print(e)
        return

    default_s3_prefix = 'https://athletifi-s3.s3.us-east-2.amazonaws.com/player-card-images/'
    s3_prefix = input(f"Enter the S3 URL prefix to remove (press Enter to use the default: {default_s3_prefix}): ")
    if not s3_prefix:
        s3_prefix = default_s3_prefix
        print(f"Using default S3 URL prefix: {s3_prefix}")

    parsed_card_data = load_parsed_card_data(parsed_csv_path)
    output_file = process_csv(input_file, output_folder, s3_prefix, parsed_card_data)

    print(f"\nProcessed CSV has been saved to: {output_file}")
    print("\nThe CSV is now ready for use with the QR code generator.")
    print_concluding_message()

def print_concluding_message():
    concluding_message = """
┌──────────────────────────────────────────┐
│               Next Steps:                │
└──────────────────────────────────────────┘
Before proceeding, please verify a few of the results:
1. Open the processed CSV file and select a few qrcode_id values from the qr_code_url column.
2. For each selected qrcode_id, run the following SQL query in your database:

   SELECT pci.*
   FROM qr_redirects qr
   JOIN invitations i ON qr.invite_id = i.invite_id
   JOIN player_card_images pci ON i.card = pci.card_image_id
   WHERE qr.qrcode_id = 'your_selected_qrcode_id';

3. Verify that the card_image_url in the query result matches the corresponding card_filename in your processed CSV.
4. If any discrepancies are found, review and correct the data before proceeding with QR code generation.

Proceed to the QR code generation step with this CSV file to continue the process.
    """
    print(concluding_message)


if __name__ == "__main__":
    main()

